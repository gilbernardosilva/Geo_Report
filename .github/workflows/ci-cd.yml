name: Docker Compose CI/CD

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      DROPLET_IP: ${{ secrets.DROPLET_IP }}
      DROPLET_USERNAME: ${{ secrets.DROPLET_USERNAME }}
      DROPLET_PATH: ${{ secrets.DROPLET_PATH }}/

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Generate .env file
        run: |
          echo "DB_HOST=${{ secrets.DB_HOST }}" > .env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env
          echo "JWT_PRIVATE_KEY=${{ secrets.JWT_PRIVATE_KEY }}" >> .env
          echo "TOKEN_TTL=${{ secrets.TOKEN_TTL }}" >> .env
          echo "REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}" >> .env

      - name: Copy .env file to droplet
        run: |
          scp -i ${{ secrets.SSH_PRIVATE_KEY }} .env ${{ env.DROPLET_USERNAME }}@${{ env.DROPLET_IP }}:${{ env.DROPLET_PATH }}

      - name: Copy docker-compose-deploy.yaml to droplet
        run: |
          scp -i ${{ secrets.SSH_PRIVATE_KEY }} docker-compose-deploy.yaml ${{ env.DROPLET_USERNAME }}@${{ env.DROPLET_IP }}:${{ env.DROPLET_PATH }}

      - name: Login to Docker Hub
        run: echo ${{ secrets.DOCKER_PASSWORD }} | docker login --username ${{ secrets.DOCKER_USERNAME }} --password-stdin

      - name: Build and push Docker images
        run: |
          docker-compose build
          docker-compose push

      - name: Deploy and check service health
        run: |
          ssh -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ env.DROPLET_USERNAME }}@${{ env.DROPLET_IP }} "cd ${{ env.DROPLET_PATH }} && docker-compose -f docker-compose-deploy.yaml pull && docker-compose -f docker-compose-deploy.yaml up -d && docker-compose -f docker-compose-deploy.yaml ps"

      - name: Clean up old images and containers
        run: |
          ssh -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ env.DROPLET_USERNAME }}@${{ env.DROPLET_IP }} "docker image prune -af && docker container prune -f"
