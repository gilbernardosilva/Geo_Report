basePath: /api/v1
definitions:
  dto.LoginDTO:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  dto.LoginResponse:
    properties:
      message:
        type: string
      token:
        type: string
    type: object
  dto.PhotoDTO:
    properties:
      url:
        type: string
    type: object
  dto.ReportCreatedDTO:
    properties:
      description:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      photos:
        items:
          $ref: '#/definitions/dto.PhotoDTO'
        type: array
      report_status_id:
        type: integer
      report_type_id:
        type: integer
      user_id:
        type: integer
    type: object
  dto.ReportResponseDTO:
    properties:
      message:
        type: string
      report:
        $ref: '#/definitions/model.Report'
    type: object
  dto.ReportUpdateDTO:
    properties:
      description:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      photos:
        items:
          $ref: '#/definitions/dto.PhotoDTO'
        type: array
      report_id:
        type: integer
      report_status_id:
        type: integer
      report_type_id:
        type: integer
      user_id:
        type: integer
    type: object
  dto.UserCreatedDTO:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      password:
        type: string
      role:
        type: integer
      username:
        type: string
    required:
    - email
    - firstname
    - lastname
    - password
    - username
    type: object
  dto.UserResponseDTO:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      username:
        type: string
    required:
    - email
    - firstname
    - lastname
    - username
    type: object
  dto.UserUpdateDTO:
    properties:
      email:
        type: string
      firstname:
        type: string
      lastname:
        type: string
      userid:
        type: string
      username:
        type: string
    required:
    - userid
    type: object
  model.Comment:
    properties:
      content:
        type: string
      created_at:
        type: string
      id:
        type: integer
      report_id:
        type: integer
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: integer
    type: object
  model.Photo:
    properties:
      created_at:
        type: string
      id:
        type: integer
      report:
        $ref: '#/definitions/model.Report'
      report_id:
        type: integer
      url:
        type: string
    type: object
  model.Report:
    properties:
      comments:
        items:
          $ref: '#/definitions/model.Comment'
        type: array
      description:
        type: string
      id:
        type: integer
      last_update:
        type: string
      latitude:
        type: number
      longitude:
        type: number
      name:
        type: string
      photos:
        items:
          $ref: '#/definitions/model.Photo'
        type: array
      report_date:
        type: string
      report_status:
        $ref: '#/definitions/model.ReportStatus'
      report_status_id:
        type: integer
      report_type:
        $ref: '#/definitions/model.ReportType'
      report_type_id:
        type: integer
      updates:
        items:
          $ref: '#/definitions/model.ReportUpdate'
        type: array
      user:
        $ref: '#/definitions/model.User'
      user_id:
        type: integer
    type: object
  model.ReportStatus:
    properties:
      id:
        type: integer
      status:
        type: string
    type: object
  model.ReportType:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  model.ReportUpdate:
    properties:
      id:
        type: integer
      report:
        $ref: '#/definitions/model.Report'
      report_id:
        type: integer
      report_status:
        $ref: '#/definitions/model.ReportStatus'
      report_status_id:
        type: integer
      updated_at:
        type: string
    type: object
  model.Role:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  model.User:
    properties:
      creationDate:
        type: string
      email:
        type: string
      first_name:
        type: string
      id:
        type: integer
      last_name:
        type: string
      password:
        type: string
      role:
        $ref: '#/definitions/model.Role'
      role_id:
        type: integer
      username:
        type: string
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a sample server celler server.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Swagger Example API
  version: "1.0"
paths:
  /dashboard:
    get:
      consumes:
      - application/json
      description: Returns the user dashboard
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
      security:
      - ApiKeyAuth: []
      summary: User dashboard
      tags:
      - users
  /report/:
    post:
      consumes:
      - application/json
      description: creates report in database
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ReportCreatedDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReportResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ReportResponseDTO'
      summary: Create Report
      tags:
      - Report
    put:
      consumes:
      - application/json
      description: updates report in database
      parameters:
      - description: Report Update Params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.ReportUpdateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReportResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ReportResponseDTO'
      summary: Update Report
      tags:
      - Report
  /report/{id}:
    get:
      consumes:
      - application/json
      description: gets report from database
      parameters:
      - description: report ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.ReportResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.ReportResponseDTO'
      summary: Get Report
      tags:
      - Report
  /report/user/{id}:
    get:
      consumes:
      - application/json
      description: Get all reports from a user by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Report'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/dto.ReportResponseDTO'
      summary: Get Reports by User ID
      tags:
      - Report
  /user/edit:
    put:
      consumes:
      - application/json
      description: edits user information in database
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdateDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.UserResponseDTO'
      summary: Edit User
      tags:
      - User
  /user/login:
    post:
      consumes:
      - application/json
      description: returns token for login
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.LoginResponse'
      summary: Login
      tags:
      - User
  /user/register:
    post:
      consumes:
      - application/json
      description: registers user in database
      parameters:
      - description: query params
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/dto.UserCreatedDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponseDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/dto.UserResponseDTO'
      summary: Register
      tags:
      - User
securityDefinitions:
  BasicAuth:
    type: basic
swagger: "2.0"
